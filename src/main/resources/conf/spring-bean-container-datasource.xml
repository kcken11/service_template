<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd">
		
	<bean id="dataSource_pg_kkworld" class="com.alibaba.druid.pool.DruidDataSource" lazy-init="true">
		<property name="driverClassName" value="${spring.ds.pg.world.driverClassName}" />
		<property name="url" value="${spring.ds.pg.world.url}" />
		<property name="username" value="${spring.ds.pg.world.username}" />
		<property name="password" value="${spring.ds.pg.world.password}" />
		<property name="validationQuery" value="${spring.ds.pg.world.validationQuery}" />
		<property name="poolPreparedStatements" value="${spring.ds.pg.world.poolPreparedStatements}" />
		<property name="initialSize" value="${spring.ds.pg.world.initialSize}" />
		<property name="maxActive" value="${spring.ds.pg.world.maxActive}" />
		<property name="maxIdle" value="${spring.ds.pg.world.maxIdle}" />
		<property name="maxWait" value="${spring.ds.pg.world.maxWait}" />
		<property name="testOnBorrow" value="${spring.ds.pg.world.testOnBorrow}" />
		<property name="testOnReturn" value="${spring.ds.pg.world.testOnReturn}" />
		<property name="testWhileIdle" value="${spring.ds.pg.world.testWhileIdle}" />
		<property name="defaultAutoCommit" value="${spring.ds.pg.world.defaultAutoCommit}" />
		<property name="timeBetweenLogStatsMillis" value="${spring.ds.pg.world.timeBetweenLogStatsMillis}"/>
       	<property name="filters" value="${spring.ds.pg.world.filters}" />
	</bean>
	
	<bean id="sqlSessionFactoryBean_pg_world" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_pg_kkworld" />
		<property name="configLocation" value="classpath:conf/mybatis.cfg.xml" />
		<property name="typeAliasesPackage" value="com.melot.talkee.driver.domain,com.melot.talkee.dao.domain" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/melot/sqlmap/*Mapper.xml</value>
			</list>
		</property>
	</bean>
    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean_pg_world" />
		<property name="basePackage" value="com.melot.talkee.dao" />
		<property name="markerInterface" value="com.melot.talkee.mybatis.MybatisMapper" />
	</bean>	
	
	
	<!-- 配置事务管理器 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource_pg_kkworld" />  
    </bean>  
  
    <!-- 注解方式配置事物 -->  
    <tx:annotation-driven transaction-manager="transactionManager" /> 
  
    <!-- 拦截器方式配置事物 -->  
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="*" propagation="REQUIRED" />  
        </tx:attributes>  
    </tx:advice>  
    <!-- Spring aop事务管理 -->  
    <aop:config>  
        <aop:pointcut id="transactionPointcut"  
            expression="execution(* com.melot.talkee.service..*.*(..))" />  
        <aop:advisor pointcut-ref="transactionPointcut"  
            advice-ref="transactionAdvice" />  
    </aop:config>  
	
</beans>